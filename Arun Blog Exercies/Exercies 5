Please perform these steps before solving the problem
1. Login to MySQL using below commands on a fresh terminal window
    mysql -u retail_dba -p
    Password = cloudera
2. Create a replica product table and name it products_replica
    create table products_replica as select * from products
3. Add primary key to the newly created table
    alter table products_replica add primary key (product_id);
4. Add two more columns
    alter table products_replica add column (product_grade int, product_sentiment varchar(100))
5. Run below two update statements to modify the data
    update products_replica set product_grade = 1  where product_price > 500;
    update products_replica set product_sentiment  = 'WEAK'  where product_price between 300 and  500;
    
Problem 5: Above steps are important so please complete them successfully before attempting to solve the problem
Using sqoop, import products_replica table from MYSQL into hdfs such that fields are separated by a '|' and lines are separated by '\n'. Null values are represented as -1 for numbers and "NOT-AVAILABLE" for strings. Only records with product id greater than or equal to 1 and less than or equal to 1000 should be imported and use 3 mappers for importing. The destination file should be stored as a text file to directory  /user/cloudera/problem5/products-text. 
Using sqoop, import products_replica table from MYSQL into hdfs such that fields are separated by a '*' and lines are separated by '\n'. Null values are represented as -1000 for numbers and "NA" for strings. Only records with product id less than or equal to 1111 should be imported and use 2 mappers for importing. The destination file should be stored as a text file to directory  /user/cloudera/problem5/products-text-part1. 
Using sqoop, import products_replica table from MYSQL into hdfs such that fields are separated by a '*' and lines are separated by '\n'. Null values are represented as -1000 for numbers and "NA" for strings. Only records with product id greater than 1111 should be imported and use 5 mappers for importing. The destination file should be stored as a text file to directory  /user/cloudera/problem5/products-text-part2.
Using sqoop merge data available in /user/cloudera/problem5/products-text-part1 and /user/cloudera/problem5/products-text-part2 to produce a new set of files in /user/cloudera/problem5/products-text-both-parts
Using sqoop do the following. Read the entire steps before you create the sqoop job.
create a sqoop job Import Products_replica table as text file to directory /user/cloudera/problem5/products-incremental. Import all the records.
insert three more records to Products_replica from mysql
run the sqoop job again so that only newly added records can be pulled from mysql
insert 2 more records to Products_replica from mysql
run the sqoop job again so that only newly added records can be pulled from mysql
Validate to make sure the records have not be duplicated in HDFS
Using sqoop do the following. Read the entire steps before you create the sqoop job.
create a hive table in database named problem5 using below command 
create table products_hive  (product_id int, product_category_id int, product_name string, product_description string, product_price float, product_imaage string,product_grade int,  product_sentiment string);
create a sqoop job Import Products_replica table as hive table to database named problem5. name the table as products_hive. 
insert three more records to Products_replica from mysql
run the sqoop job again so that only newly added records can be pulled from mysql
insert 2 more records to Products_replica from mysql
run the sqoop job again so that only newly added records can be pulled from mysql
Validate to make sure the records have not been duplicated in Hive table
Using sqoop do the following. .
insert 2 more records into products_hive table using hive. 
create table in mysql using below command   
create table products_external  (product_id int(11) primary Key, product_grade int(11), product_category_id int(11), product_name varchar(100), product_description varchar(100), product_price float, product_impage varchar(500), product_sentiment varchar(100));
export data from products_hive (hive) table to (mysql) products_external table. 
insert 2 more records to Products_hive table from hive
export data from products_hive table to products_external table. 
Validate to make sure the records have not be duplicated in mysql table

*************************************

Arun Blog Problem Scenario 5 [SQOOP]
------------------------------------

1.

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--table products_replica \
--target-dir /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text \
--fields-terminated-by '|' \
--lines-terminated-by '\n' \
--null-non-string -1 \
--null-string "NOT-AVAILABLE" \
--where "product_id between 1 and 1000" \
--m 3

2.

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--table products_replica \
--fields-terminated-by '*' \
--lines-terminated-by '\n' \
-null-non-string -1000 \
-null-string "NA" \
--where "product_id <= 1111" \
-m 2 \
--target-dir /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text-part1 \
--outdir /home/chaitanyapolipalli/products-text-part1

3.

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--table products_replica \
--fields-terminated-by '*' \
--lines-terminated-by '\n' \
-null-non-string -1000 \
-null-string "NA" \
--where "product_id > 1111" \
-m 5 \
--target-dir /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text-part2 \
--outdir /home/chaitanyapolipalli/products-text-part2

4.

sqoop merge \
--new-data /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text-part2 \
--onto /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text-part1 \
--target-dir /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-text-both-parts \
--merge-key product_id \
--class-name products_replica \
--jar-file /tmp/sqoop-chaitanyapolipalli/compile/616d6027deebae0070acb0e47faf413f/products_replica.jar


5.

sqoop job --create myfirstjob \
-- import \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--table products_replica \
--target-dir /user/chaitanyapolipalli/ArunBlogPractice/problem5/products-incremental \
--check-column product_id \
--incremental append \
--last-value 0 \
--m 1

sqoop job --exec myfirstjob

insert into products_replica values (1346,2,'something 1','something 2',300.00,'not avaialble',3,'STRONG');
insert into products_replica values (1346,2,'something 1','something 2',300.00,'not avaialble',3,'STRONG');

sqoop job --exec myfirstjob

6.

use chaitanyapolipalli_daily_revenue;

create table products_hive(product_id int, product_category_id int, product_name string, product_description string, product_price float, product_image string,product_grade int, product_sentiment string);

sqoop job --create mysecondjob \
-- import \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--table products_replica \
--incremental append \
--last-value 0 \
--check-column product_id \
--hive-import \
--hive-database chaitanyapolipalli_daily_revenue \
--hive-table products_hive \
--m 1

insert into products_hive values (1389,2,'something 1','something 2',300.00,'not avaialble',3,'STRONG');
insert into products_hive values (1390,2,'something 1','something 2',300.00,'not avaialble',3,'STRONG');


7.

create table chaitanya_polipalli_products_external  (product_id int(11) primary Key, product_grade int(11), product_category_id int(11), product_name varchar(100), product_description varchar(100), product_price float, product_impage varchar(500), product_sentiment varchar(100));


sqoop export \
--connect jdbc:mysql://ms.itversity.com/retail_export \
--username retail_user \
--password itversity \
--export-dir /apps/hive/warehouse/chaitanyapolipalli_daily_revenue.db/products_hive \
--table chaitanya_polipalli_products_external \
--update-key product_id \
--update-mode allowinsert \
--input-fields-terminated-by '\001' \
--input-null-non-string "null" \
--input-null-string "null" \
--columns product_id,product_category_id,product_name,product_description,product_price,product_impage,product_grade,product_sentiment \
--m 3





